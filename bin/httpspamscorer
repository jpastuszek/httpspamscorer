#!/usr/bin/env ruby
require 'unicorn-cuba-base'
require 'excon'

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'httpspamscorer/reconstructed_mail'
require 'httpspamscorer/error_reporter'

Application.new('httpspamscorer', port: 4000) do
	cli do
		description 'Spam Soring HTTP server'

		option :backend_host,
			short: :B,
			default: 'localhost'
		option :backend_normal_port,
			short: :P,
			cast: Integer,
			default: 11333
		option :backend_control_port,
			short: :C,
			cast: Integer,
			default: 11334

		version (Pathname.new(__FILE__).dirname + '..' + 'VERSION').read
	end

	settings do |settings|
	end

	main do |settings|
		Controller.settings[:normal] = Excon.new("http://#{settings.backend_host}:#{settings.backend_normal_port}", read_timeout: 60, :persistent => true)
		Controller.settings[:control] = Excon.new("http://#{settings.backend_host}:#{settings.backend_control_port}", read_timeout: 60, :persistent => true)

		class HTTPSpamScorer < Controller
			extend Stats
			def_stats(
				:workers,
				:total_requests,
				:total_errors,
				:total_emails_checked,
				:total_spam,
				:total_ham,
				:total_emails_learned,
				:total_spam_learned,
				:total_ham_learned
			)

			raindrops_stats = Raindrops::Middleware::Stats.new
			self.use Raindrops::Middleware, stats: raindrops_stats

			StatsReporter << HTTPSpamScorer.stats
			StatsReporter << raindrops_stats
			StatsReporter << Plugin::ResponseHelpers.stats

			def normal
				@normal ||= settings[:normal]
			end

			def control
				@control ||= settings[:control]
			end

			class ::ReconstructedMail
				# helper to find Received header value matching regexp
				def find_received(regexp)
					case header['Received']
					when String
						header['Received'] =~ regexp and header['Received']
					when Array
						header['Received'].map(&:value).select{|val| val =~ regexp}.first
					else
						nil
					end
				end
			end

			self.define do
				HTTPSpamScorer.stats.incr_total_requests
				on error? do
					HTTPSpamScorer.stats.incr_total_errors
					run ErrorReporter
				end

				on 'stats' do
					run StatsReporter
				end

				on 'health_check' do
					write_plain 200, 'HTTP Spam Scorer OK'
				end

				on root do
					write_plain 200, 'HTTP Spam Scorer'
				end

				def handle_backend_response(resp)
					msg = JSON.parse(resp.body)
					fail "backend returned error: #{msg['error']}" if msg.key? 'error'
					msg
				rescue JSON::ParserError
					fail "backend returned empty or invalid JSON response: #{resp.body}"
				end

				on post do
					msg = JSON.parse(req.body.read.to_s)
					mail = ReconstructedMail.from_hash(msg)

					on 'check' do
						on root do
							headers = {}

							# Use provided or first Received header entry (latest?) that should be most trustworthy to determine context data
							received = msg['received'] || mail.find_received(/^from /)
							received and begin
								helo, ip, hostname, to =  *received.match(/from (?:\[[^ ]+\]|([^\[][^ ]+)) \((?:[^ ]+ )?\[([^\]]+)\]\)(?: by ([^ ]+))?(?:.* for <([^>]+)>)?/).captures

								headers['Hostname'] = hostname if hostname
								headers['Helo'] = helo if helo
								headers['Ip'] = ip if ip
								headers['Rcpt'] = to if to
								log.debug "using context headers from: #{received}"
							rescue
								log.warn "can't parse received_for string: #{received}"
							end

							# If we still didn't get the recipient try looking for it in another Received headers
							unless headers['Rcpt']
								received_for = mail.find_received(/ for </)
								received_for and begin
									to = received_for.match(/for <([^>]+)>/).captures.first

									headers['Rcpt'] = to if to
									log.debug "using Rcpt from: #{received_for}"
								rescue
									log.warn "can't parse received string: #{received_for}"
								end if received_for
							end

							headers['Hostname'] = msg['hostname'] if msg['hostname']
							headers['User'] = msg['user'] if msg['user']
							headers['Deliver-To'] = msg['deliver-to'] if msg['deliver-to']
							headers['Helo'] = msg['helo'] if msg['helo']
							headers['Ip'] = msg['ip'] if msg['ip']
							headers['From'] = msg['from'] if msg['from']
							headers['Rcpt'] = msg['rcpt'] if msg['rcpt']

							log.info "checking e-mail with context headers: #{headers}"

							resp = normal.post path: '/check', headers: headers, body: mail.to_s
							msg = handle_backend_response(resp)

							unless msg.key? 'default'
								log.error "backend did not return 'default' result set: #{msg}"
								write_json 500, msg
								halt(res.finish)
							end

							result = msg['default']
							log.debug{"check results: #{result}"}

							symbols = result.keys.grep /[A-Z]/
							log.with_meta_context(
								'message-id' => mail.message_id,
								'from' => mail.from,
								'to' => mail.to,
								'ip' => headers['Ip'],
								'score' => result['score'],
								'required_score' => result['required_score'],
								'is_spam' => result['is_spam'],
								'action' => result['action'],
								'symbols' => symbols
							) do
								log.info{"check result: score: #{result['score']}/#{result['required_score']} (#{result['is_spam'] ? 'spam' : 'ham'}), action: #{result['action']}, symbols: #{symbols.map{|sym| "#{sym}(#{result[sym]['score']})"}.join(', ')}"}
							end

							write_json 200, result

							HTTPSpamScorer.stats.incr_total_emails_checked
							result['is_spam'] ? HTTPSpamScorer.stats.incr_total_spam : HTTPSpamScorer.stats.incr_total_ham
						end
					end

					on 'learn' do
						on 'spam' do
							on root do
								resp = control.post path: '/learnspam', body: mail.to_s
								write_json 200, handle_backend_response(resp)

								HTTPSpamScorer.stats.incr_total_spam_learned
								HTTPSpamScorer.stats.incr_total_emails_learned
							end
						end

						on 'ham' do
							on root do
								resp = control.post path: '/learnham', body: mail.to_s
								write_json 200, handle_backend_response(resp)

								HTTPSpamScorer.stats.incr_total_ham_learned
								HTTPSpamScorer.stats.incr_total_emails_learned
							end
						end
					end
				end
			end
		end

		HTTPSpamScorer
	end

	after_fork do |server, worker|
		HTTPSpamScorer.stats.incr_workers
	end
end
